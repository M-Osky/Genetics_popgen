#!/bin/bash 

#plotbestKs_v3.1.sh


#TO PLOT A RANGE OF K VALUES FROM FASTSTRUCTURE
# Fast structure gives two different approaches for the best K value.
#This script will extract both values from the output file
#And if they are different will plot all the range of values between them. If they are equal will plot just that value.

#If the program does not find the output file from "chooseK.py" will run that program to get the best K values
#then plot the K values according with the results
#You will need to have bestKini.pl and bestKfin.pl in your perl library or even better in your local folder
#if it fails to find them you will need to source them, add them to your path or copy them at local workig directory

#Alternatively instead of plotting the "best K values" we can specify manually a range of K values to plot.


## SETTINGS
###############################################################################################################################################################################
#Program options
# set PLOTMAX to 0 to plot the best K values according to chooseK.py output, set PLOTMAX to any other number (> 1) to manually set a range of values
PLOTMIN=2      # Minimum value of the range to plot, typically 1. USED ONLY TO PLOT A CHOOSEN RANGE OF VALUES INSTEAD OF THE "BEST VALUES". 
PLOTMAX=0      # Maximum value of the range to plot. if > 0 is USED TO PLOT A CHOOSEN RANGE OF VALUES INSTEAD OF THE "BEST VALUES".

# Title for your plot, it will automatically add "K=X" at the end (being "X" the value of K that is being plotted).
TITLE=""	#Final title will be -> "FastStructure results $TITLE (K= X)"

#File with sorted populations (optional)
SORTED="sortedpops"
#List of populationcode from each sample sorted as the input file (this file is generated by inputconverter_faststructure or can be obtained from filename.fam
popmap="populations"

# This variables should match the values/names used when fastStructure was ran.
INPUTFILE=lemurian_gamusins_42populations_FastStr #Name of your Faststructure input file, without extension
WORKPATH=/bigcommon/moscar/home/Lizards/faststructure/out		#Working directory
OUTFOLDER=out_simp		#directory containing the fastStructure outputs
SUFIX="_out"		#string added to the name of FastStructure input file to generate faststructure output file names

#To be clear: Your output files from Faststructure must be named "$INPUTFILE$SUFIX.number.meanQ" and be at "$OUTFOLDER"


###############################################################################################################################################################################

#Before proceeding check where is faststructure installed and be sure that you add the path for python in "export PATH=$PATH"
PROGRAMPATH1=/software/fastStructure
PROGRAMPATH2=/software/distruct22

###############################################################################################################################################################################
                                                                                                                                                                             ##
#Change log version 3.2	 - 	MÓsky	 - 	03/09/2018                                                                                                                           ##
# - Minor bugs fixed                                                                                                                                                         ##
#Change log version 3.1	 - 	MÓsky	 - 	12/08/2018                                                                                                                           ##
# - Imlemented the title for the plot as a new option, it will automatically add the K at the end                                                                            ##
#Change log version 3.0	 - 	MÓsky	 - 	31/07/2018                                                                                                                           ##
# - Implemented distruct 2.2!!                                                                                                                                               ##
# - Simplified the number of parameters                                                                                                                                      ##
#                                                                                                                                                                            ##
#Change log version 2.0	 - 	MÓsky	 - 	31/07/2018                                                                                                                           ##
# - Added an option to run "chooseK.py" if there is not a "BestK.txt" file with the most likelly/better K values                                                             ##
# - Minor compatibility fixes and better error report                                                                                                                        ##
# - Added the possibility to plot a range of Ks independently of the bestK                                                                                                   ##
                                                                                                                                                                             ##
###############################################################################################################################################################################


OUTNAME="$INPUTFILE$SUFIX"
OUTFILES="$WORKPATH/$OUTFOLDER/"
OUTPATH="$WORKPATH/$OUTFOLDER/$OUTNAME"
SAVEK="$WORKPATH/BestK.txt"
SORTFILE="$WORKPATH/$SORTED"
DISPATH1="$PROGRAMPATH1/distruct.py"
DISPATH2="$PROGRAMPATH2/distruct2.2.py"

if [ $PLOTMAX == 0 ]
then
	if [ ! -f "$SAVEK" ]		#Look for the BestKfile, if is not found run chooseK.py
	then
		printf "\n$SAVEK not found.\nComparing the output files to find best K at: $OUTFILES\n\n"
		KPATH="$PROGRAMPATH1/chooseK.py"
		BESTK=$python $KPATH --input=$OUTPATH
		$KPATH --input=$OUTPATH > $SAVEK
		echo $BESTK
	else
		printf "\nReading K values from $SAVEK\n"
		cat $SAVEK
	fi

	printf "Ready to plot best K values.\n"


	KINI=$(bestKini.pl)			# You may need to add "perl" here (perl bestKini.pl)
	KFIN=$(bestKfin.pl)			# You may need to add "perl" here (perl bestKini.pl)
	

	if [ $KINI -lt $KFIN ]
	then
		printf "Plotting from K $KINI to $KFIN\n\n"
		for((val=$KINI; val<=$KFIN; val++))
		do
			PLOTNAME="$INPUTFILE.$val.svg"
			PATHPLOT=$WORKPATH/$OUTFOLDER/$PLOTNAME
			
			if [ ! -f "$SORTFILE" ]
			then
				python $DISPATH1 -K $val --input=$OUTPATH --output=$PATHPLOT --popfile=$popmap
			else
				python $DISPATH2 -K $val --input=$OUTPATH --output=$PATHPLOT --title="Best FastStructure results $TITLE (K=$val)" --popfile=$popmap --poporder=$SORTFILE
			fi
			printf "Plot for K = $val generated saved at $PATHPLOT\n"
		done
		printf "\nDistruct finished!\n\n"
	elif [ $KFIN -lt $KINI ]
	then
		printf "Plotting from K $KFIN to $KINI\n\n"
		for((val=$KFIN; val<=$KINI; val++))
		do
			PLOTNAME="$INPUTFILE.$val.svg"
			PATHPLOT=$WORKPATH/$OUTFOLDER/$PLOTNAME
			if [ ! -f "$SORTFILE" ]
			then
				python $DISPATH1 -K $val --input=$OUTPATH --output=$PATHPLOT --popfile=$popmap
			else
				#printf "\n\nThis fails\n\n"
				python $DISPATH2 -K $val --input=$OUTPATH --output=$PATHPLOT --title="Best FastStructure results $TITLE (K=$val)" --popfile=$popmap --poporder=$SORTFILE
			fi
			printf "Plot for K = $val saved at $PATHPLOT\n"
		done
		printf "\nDistruct finished!\n\n"
	elif [ $KFIN == $KINI ]
	then
		printf "Plotting K = $KINI\n"
		PLOTNAME="$INPUTFILE.$KFIN.svg"
		PATHPLOT=$WORKPATH/$OUTFOLDER/$PLOTNAME
		if [ ! -f "$SORTFILE" ]
		then
			python $DISPATH1 -K $KFIN --input=$OUTPATH --output=$PATHPLOT --popfile=$popmap
		else
			python $DISPATH2 -K $KFIN --input=$OUTPATH --output=$PATHPLOT --title="Best FastStructure result $TITLE (K=$val)" --popfile=$popmap --poporder=$SORTFILE
		fi
		printf "Plot for K = $KFIN generated saved at $PATHPLOT\n"
		printf "\nDistruct finished!\n"
	else
		echo "\nThere was some ERROR while extracting the best K values\n\n"
	fi
elif [ $PLOTMAX -gt 0 ]
then
	printf "\nPlotting a selected range of K values (from $PLOTMIN to $PLOTMAX).\n"
	for((val=$PLOTMIN; val<=$PLOTMAX; val++))
	do
		PLOTNAME="$INPUTFILE.$val.svg"
		PATHPLOT=$WORKPATH/$OUTFOLDER/$PLOTNAME
		if [ ! -f "$SORTFILE" ]
		then
			python $DISPATH1 -K $val --input=$OUTPATH --output=$PATHPLOT --popfile=$popmap
		else
			python $DISPATH2 -K $val --input=$OUTPATH --output=$PATHPLOT --title="FastStructure results $TITLE (K=$val)" --popfile=$popmap --poporder=$SORTFILE
		fi
		printf "Plot for K = $val saved at $PATHPLOT\n"
	done
	printf "\nDistruct finished!\n\n"
else
	printf "\nSomething went wrong, probably the variables PLOTMIN and PLOTMAX were not correctly defined\n"
	printf "Set PLOTMAX to 0 to plot the best K values. Alternatively set a range of values to plot from PLOTMIN to PLOTMAX\n\n"
fi


